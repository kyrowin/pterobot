import aiohttp
import os  
from dotenv import load_dotenv  
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.utils.exceptions import Unauthorized
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

load_dotenv()
env_errors = ""
BOT_TOKEN = os.getenv('BOT_TOKEN')
PTERODACTYL_URL = os.getenv('PTERODACTYL_URL')
PTERODACTYL_API_KEY = os.getenv('PTERODACTYL_API_KEY')
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
headers = {
    'Authorization': f'Bearer {PTERODACTYL_API_KEY}',
    'Content-Type': 'application/json',
    'Accept': 'Application/vnd.pterodactyl.v1+json'
}
if PTERODACTYL_URL == 'https://pterodactyl.example.com':
    env_errors +="\n–ü—Ä–æ–±–ª–µ–º–∞: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π PTERODACTYL_URL –≤ .env"
if PTERODACTYL_API_KEY == 'ptlc_AAAAAAAAAAAAAAAAAAAAAAAAAAAA':
    env_errors +="\n–ü—Ä–æ–±–ª–µ–º–∞: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π PTERODACTYL_API_KEY –≤ .env"
if env_errors == "":
    pass
else:
    env_errors +="\n(–†–µ—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã, –∏–Ω–∞—á–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å)"

async def api_request(method, endpoint, json=None):
    async with aiohttp.ClientSession() as session:
        async with session.request(
            method,
            f'{PTERODACTYL_URL}/api/client/{endpoint}',
            headers=headers,
            json=json
        ) as response:
            if response.status == 204:
                return True
            return await response.json()
async def get_servers():
    return await api_request('GET', '')
async def get_server_status(server_id):
    return await api_request('GET', f'servers/{server_id}/resources')
async def get_server_details(server_id):
    return await api_request('GET', f'servers/{server_id}')
async def power_action(server_id, action):
    return await api_request('POST', f'servers/{server_id}/power', {'signal': action})

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üñ• –ú–æ–∏ —Å–µ—Ä–≤–µ—Ä—ã", callback_data="list_servers"))
    await message.answer(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏ pterodactyl!\n{env_errors}", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "list_servers")
async def list_servers(callback_query: types.CallbackQuery):
    servers_data = await get_servers()
    servers_list = "üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n"
    keyboard = InlineKeyboardMarkup(row_width=1)
    for server in servers_data['data']:
        attrs = server['attributes']
        server_id = attrs['identifier']
        status_data = await get_server_status(server_id)
        current_state = status_data['attributes']['current_state']
        state_emoji = {
            'running': 'üü¢',
            'starting': 'üü°',
            'stopping': 'üü°',
            'offline': '‚ö´'
        }.get(current_state, '‚ö™')
        servers_list += f"{state_emoji} {attrs['name']} | {current_state.upper()}\n\n"

        keyboard.add(InlineKeyboardButton(
            f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {attrs['name']}", 
            callback_data=f"server_{server_id}"
        ))
    
    keyboard.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="list_servers"))
    try:
        await callback_query.message.edit_text(servers_list, reply_markup=keyboard)
        await callback_query.answer()
    except:
        await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('server_'))
async def server_menu(callback_query: types.CallbackQuery):
    server_id = callback_query.data.split('_')[1]
    server_data = await get_server_details(server_id)
    status_data = await get_server_status(server_id)
    
    if 'attributes' in server_data and 'attributes' in status_data:
        attrs = server_data['attributes']
        status_attrs = status_data['attributes']
        current_ram = status_attrs['resources']['memory_bytes'] / 1024 / 1024
        max_ram = attrs['limits']['memory']
        current_disk = status_attrs['resources']['disk_bytes'] / 1024 / 1024
        max_disk = attrs['limits']['disk']
        ip = attrs['relationships']['allocations']['data'][0]['attributes']['ip_alias']
        port = attrs['relationships']['allocations']['data'][0]['attributes']['port']
        current_cpu = status_attrs['resources']['cpu_absolute']
        max_cpu = attrs['limits']['cpu']
        current_state = status_attrs['current_state']
        state_emoji = {
            'running': 'üü¢',
            'starting': 'üü°',
            'stopping': 'üü°',
            'offline': '‚ö´'
        }.get(current_state, '‚ö™')
        iof max_disk == 0:
            max_disk = "–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ "
        if ip == None:
            ip = attrs['relationships']['allocations']['data'][0]['attributes']['ip']
        server_info = f"""
‚öôÔ∏è –°–µ—Ä–≤–µ—Ä: {attrs['name']}
–°—Ç–∞—Ç—É—Å: {state_emoji} {current_state.upper()}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
CPU: {current_cpu:.1f}%/{max_cpu}%
RAM: {current_ram:.1f}MB/{max_ram}MB
–î–∏—Å–∫: {current_disk:.1f}MB/{max_disk}MB

üåê IP: {ip}:{port}
"""
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫", callback_data=f"power_{server_id}_start"),
            InlineKeyboardButton("‚èπ –°—Ç–æ–ø", callback_data=f"power_{server_id}_stop"),
            InlineKeyboardButton("üîÑ –†–µ—Å—Ç–∞—Ä—Ç", callback_data=f"power_{server_id}_restart"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"server_{server_id}"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_servers")
        )
        try:
            await callback_query.message.edit_text(server_info, reply_markup=keyboard)
        except:
            pass
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('power_'))
async def handle_power_action(callback_query: types.CallbackQuery):
    _, server_id, action = callback_query.data.split('_')
    action_text = {
        'start': '–∑–∞–ø—É—Å–∫',
        'stop': '–æ—Å—Ç–∞–Ω–æ–≤–∫–∞',
        'restart': '–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫'
    }
    await callback_query.answer(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {action_text[action]}...")
    success = await power_action(server_id, action)
    if success:
        await server_menu(callback_query)
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã", show_alert=True)

if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True)
    except Unauthorized:
        print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—Å—Ç–∞–≤–∏–ª–∏ BOT_TOKEN –≤ .env (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–≤ .env.example –≤ .env)")